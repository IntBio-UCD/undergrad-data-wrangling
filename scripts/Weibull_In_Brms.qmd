---
title: "Weibull in BRMs"
author: "Julin Maloof"
format:
  revealjs:
    theme: sky
    margin: 0.075
    code-line-numbers: false
    embed-resources: true
    smaller: true
    scrollable: true
    incremental: true
---

```{r}
knitr::opts_chunk$set(cache = TRUE, autodep = TRUE)
```

```{r}
library(tidyverse)
library(brms)
```


## Weibull in brms

## Data set:
Use all dates for the Weibull modeling
```{r, echo=TRUE}
dat <- read_csv("../output/height_data_clean.csv")

dat <- dat %>%
  mutate(day=as.numeric(survey_date-min(survey_date)+30),
         mf=factor(mf))

datbcd <- dat %>% filter(str_detect(pop, "BH|CC|DPR"))

```


## Non-linear model specification in brms

Our formula specification is a bit more complex, so we use the function `brmsformula` to define the non-linear formula.

I am also going to rename a couple of the parameters to be more clear
```{r, echo=TRUE}
f1 <- brmsformula(height_cm ~ Hmax - (Hmax - Hmin) * exp(-(k/100 * day)^delta),
                  Hmax + Hmin + k + delta ~ 1,
                  nl=TRUE)
```

* The first line should look familiar (Weibull formula)
  - I am dividing k by 100 just to get it on a more reasonable scale
* The second line is new, and it defines how each parameter should be fit with respect to the predictors in our data set.
* The notation `Hmax + Hmin + k + delta ~ 1` means that we want a single parameter value (Intercept) for each of the four parameters
* `nl=TRUE` tells brms that this is a non-linear formula.

## get the priors

Please review your notes and figure out how to get the possible priors for the formula on the previous slide

```{r}
get_prior(f1, data=datbcd)
```
## Set the priors

What priors should we use?

```{r echo=TRUE, eval=TRUE}
prior1 <- c(set_prior("normal(5,3)", nlpar="Hmin"),
            set_prior("normal(60,15)",  nlpar="Hmax"),
            set_prior("gamma(2,2)", nlpar = "k"), # gamma constrains to be > 0
            set_prior("gamma(20, 3)", nlpar="delta")
)
```

## Why gamma? {.nonincremental}

* Want to constrain k and delta to be > 0.
* Setting lower bounds causes problems
* Gamma distribution is positive

```{r, echo=TRUE}
tibble(x=seq(0,10,.1),
       gamma_2_2=dgamma(x, 2, 2),
       gamma_20_3=dgamma(x, 20, 3)) %>%
  pivot_longer(-x, values_to = "density") %>%
  ggplot(aes(x=x,y=density, color=name)) +
  geom_line()

```
## Fit the model

```{r, echo=TRUE}
fit1 <- brm(formula=f1, data=datbcd, prior=prior1, cores = 4)
```
## Get the summary
```{r, echo=TRUE}
summary(fit1)
```
## fit1 plots
```{r, echo=TRUE}
plot(fit1, N = 3, ask=FALSE)
```
## fit 1 predictions
```{r, echo=TRUE}
fit1.prediction <- cbind(datbcd, pred1=predict(fit1)[,"Estimate"])

fit1.prediction %>% ggplot(aes(x=day)) +
  geom_line(aes(group=plantID, y=height_cm), alpha=.1) +
  geom_line(aes(y=pred1), color="blue") 
```

## fit 1 plot predictions per pop
* Please write code to generate the plot below (you can do this by adding one function call to the code on the previous slide)
* In your own words, how did it do?
```{r}
fit1.prediction %>% ggplot(aes(x=day)) +
  geom_line(aes(group=plantID, y=height_cm), alpha=.1) +
  geom_line(aes(y=pred1), color="blue") +
  facet_wrap(~pop)
```

## Allow a different Hmax for each pop {.nonincremental}

* The plants from different pops grow to different heights.  Maybe we should model that.  
* With only 3 pops we will use a fixed effect. (Need 5+ for random effect)
* See below for how we specify that Hmax should take on a different value for each pop
```{r, echo=TRUE}
f2 <- brmsformula(height_cm ~ Hmax - (Hmax - Hmin) * exp(-(k/100 * day)^delta),
                  Hmin + k + delta ~ 1,
                  Hmax ~ pop,
                  nl=TRUE)
```

## get the priors

Please review your notes and figure out how to get the possible priors for the formula on the previous slide

```{r}
get_prior(f2, data=datbcd)
```
## Set the priors
* Do these seem reasonable to you?
```{r echo=TRUE, eval=TRUE}
prior2 <- c(set_prior("normal(5,3)", nlpar="Hmin"),
            set_prior("normal(60,15)", nlpar="Hmax"),
            set_prior("normal(0,20)", nlpar="Hmax", coef="popCC"),
            set_prior("normal(0,20)", nlpar="Hmax", coef="popDPR"),
            set_prior("gamma(2,2)", nlpar = "k"), # gamma constrains to be > 0
            set_prior("gamma(20, 3)", nlpar="delta")
)
```

## Fit model 2
```{r, echo=TRUE}
fit2 <- brm(formula=f2, data=datbcd, prior=prior2, cores = 4)
```

## Fit 2 summary
Any Problems?
```{r, echo=TRUE}
summary(fit2)
```

## Fit 2 plots
Any problems?
```{r, echo=TRUE}
plot(fit2, N = 3, ask=FALSE)
```

## Fit 2 plot the predictions
```{r, echo=TRUE}
datbcd$pred2 <- predict(fit2)[,"Estimate"]

datbcd %>% ggplot(aes(x=day)) +
  geom_line(aes(group=plantID, y=height_cm, color=pop), alpha=.3) +
  geom_line(aes(y=pred2, color=pop)) +
  scale_color_brewer(type="qual", palette = "Set2", guide="none") +
  facet_wrap(~pop)
```

## Fit 2 Extend the CC and DPR curves out for all days {.nonincremental}
* It would be nice to get predictions for CC and DPR all the way out to day 200
* To do this, we create a data frame containing each day and pop for which we would like a prediction
* The function `expand_grid` creates a data frame with all combinations of the items it is given (days and pops in this case). 
```{r, echo=TRUE}
pred.df <- expand_grid(day=min(datbcd$day):max(datbcd$day),
                       pop=unique(datbcd$pop))
pred.df
```

## Fit 2 Extend the CC and DPR curves out for all days (slide 2)
* Now we use our prediction data frame to generate predictions
```{r, echo=TRUE}
fit2.predictions <- cbind(pred.df, prediction=predict(fit2, newdata = pred.df)[,"Estimate"]) %>%
  full_join(datbcd, by=c("day", "pop"))

fit2.predictions
```

## plot full predictions {.nonincremental}
* What do you think if the predictions?  Any better than model 1?  
* Do you agree with the Hmax values generated by the model?
* If not, why do you think the model is generating those values? (also see next slide)
```{r, echo=TRUE}
fit2.predictions %>% ggplot(aes(x=day)) +
  geom_line(aes(group=plantID, y=height_cm, color=pop), alpha=.2) +
  geom_line(aes(y=prediction, color=pop)) +
  scale_color_brewer(type="qual", palette = "Set2", guide="none") +
  facet_wrap(~pop)
```

## DPR data + all predictions {.nonincremental}
* This may be helpful in answering the last question
```{r, echo=TRUE}
fit2.predictions %>% ggplot(aes(x=day)) +
  geom_line(aes(group=plantID, y=height_cm, color=pop),
            alpha=.2,
            data = {fit2.predictions %>% filter(pop=="DPR")}) +
  geom_line(aes(y=prediction, color=pop)) +
  scale_color_brewer(type="qual", palette = "Set2") 
```

## Let's try a new model

* Having Hmax alone vary by population did not produce a very good fit.  
* Exercise: Create and fit a model that allows Hmax and k  parameters to vary by population
* Plot your results: Any better?
* Perform a model comparison among all 3 models using the `loo` technique shown above: which fits best?

## My formula

```{r, echo=TRUE}
f3 <- brmsformula(height_cm ~ Hmax - (Hmax - Hmin) * exp(-(k/100 * day)^delta),
                  Hmin + delta ~ 1,
                  Hmax + k ~ pop,
                  nl=TRUE)
```

## get the priors

Please review your notes and figure out how to get the possible priors for the formula on the previous slide

```{r}
get_prior(f3, data=datbcd)
```
## Set the priors

What priors should we use?

```{r echo=TRUE, eval=TRUE}
prior3 <- c(set_prior("normal(5,3)", lb=0, nlpar="Hmin"),
            set_prior("normal(60,15)", nlpar="Hmax"),
            set_prior("normal(0,20)", nlpar="Hmax", coef="popCC"),
            set_prior("normal(0,20)", nlpar="Hmax", coef="popDPR"),
            set_prior("gamma(2,2)", nlpar = "k"), # gamma constrains to be > 0
            set_prior("normal(0, 1)", nlpar = "k", coef="popCC"),
            set_prior("normal(0, 1)", nlpar = "k", coef= "popDPR"),
            set_prior("gamma(20, 3)", nlpar="delta")

)
```
I use a gamma on `k` to keep the Intercept k positive. 

I use a zero-centered normal for the `popCC` and `popDPR` `k` priors so that these can vary above or below the intercept value of `k`

## model summary
```{r}
fit3 <- brm(formula=f3, data=datbcd, prior=prior3, cores = 4)
```


```{r}
summary(fit3)
```

## model plot
```{r}
plot(fit3, N=3, ask=FALSE)
```

## pairs
You can use a `pairs` plot to see how to parameters co-vary during the fit. Generally we don't want to see a strong correlation among parameters.  Here we see that Hmax and K for popCC have an inverse correlation.  This isn't ideal but I think it is because we have so little CC data.  We could impose narrower priors on these parameters but given the lack of data I think I will just leave it.
```{r}
pairs(fit3, variable="CC", regex = TRUE)
```

## Predictions

```{r}
fit3.predictions <- cbind(pred.df, prediction=predict(fit3, newdata = pred.df)[,"Estimate"]) %>%
  full_join(datbcd, by=c("day", "pop"))
```

```{r}
fit3.predictions %>% ggplot(aes(x=day)) +
  geom_line(aes(group=plantID, y=height_cm, color=pop), alpha=.2) +
  geom_line(aes(y=prediction, color=pop)) +
  scale_color_brewer(type="qual", palette = "Set2", guide="none") +
  facet_wrap(~pop)
```

## Model comparison

```{r, echo=TRUE}
fit1 <- add_criterion(fit1, "loo")
fit2 <- add_criterion(fit2, "loo")
fit3 <- add_criterion(fit3, "loo")
loo_compare(fit1, fit2, fit3)
```


## Next {.nonincremental}

For Monday March 4th

* Fit a model where delta and Hmax can vary by pop.
* Fit a model where delta, k, and Hmax can vary by pop.  Don't worry if this doesn't work well (but if it doesn't, think about why it doesn't)
* Do model diagnostics, plots, and predictive plots on the above.
* Do a model comparison between all 5 models

Other stuff that Julin is thinking about for future meetings

* Uncertainty on the predictions
* On to random effects and all pops
* CENSORED DATA?

## Delta and Hmax by pop:


```{r, echo=TRUE}
f4 <- brmsformula(height_cm ~ Hmax - (Hmax - Hmin) * exp(-(k/100 * day)^delta),
                  Hmin + k ~ 1,
                  Hmax + delta ~ pop,
                  nl=TRUE)
```

## Set the priors

What priors should we use?

```{r echo=TRUE, eval=TRUE}
prior4 <- c(set_prior("normal(5,3)", lb=0, nlpar="Hmin"),
            set_prior("normal(60,15)", nlpar="Hmax"),
            set_prior("normal(0,20)", nlpar="Hmax", coef="popCC"),
            set_prior("normal(0,20)", nlpar="Hmax", coef="popDPR"),
            set_prior("gamma(2,2)", nlpar = "k"), # gamma constrains to be > 0
            set_prior("gamma(20, 3)", nlpar="delta"),
            set_prior("normal(0, 5)", nlpar = "delta", coef="popCC"),
            set_prior("normal(0, 5)", nlpar = "delta", coef= "popDPR")

)
```

## model summary
```{r}
fit4 <- brm(formula=f4, data=datbcd, prior=prior4, cores = 4)
```


```{r}
summary(fit4)
```

## model plot
```{r}
plot(fit4, N=3, ask=FALSE)
```


## Predictions

```{r}
fit4.predictions <- cbind(pred.df, prediction=predict(fit4, newdata = pred.df)[,"Estimate"]) %>%
  full_join(datbcd, by=c("day", "pop"))
```

```{r}
fit4.predictions %>% ggplot(aes(x=day)) +
  geom_line(aes(group=plantID, y=height_cm, color=pop), alpha=.2) +
  geom_line(aes(y=prediction, color=pop)) +
  scale_color_brewer(type="qual", palette = "Set2", guide="none") +
  facet_wrap(~pop)
```

## Model comparison

```{r, echo=TRUE}
fit4 <- add_criterion(fit4, "loo")
loo_compare(fit1, fit2, fit3, fit4)
```

## Hmax, delta, and k


```{r, echo=TRUE}
f5 <- brmsformula(height_cm ~ Hmax - (Hmax - Hmin) * exp(-(k/100 * day)^delta),
                  Hmin ~ 1,
                  Hmax + k + delta ~ pop,
                  nl=TRUE)
```

## Set the priors

What priors should we use?

```{r echo=TRUE, eval=TRUE}
prior5 <- c(set_prior("normal(5,3)", lb=0, nlpar="Hmin"),
            set_prior("normal(60,15)", nlpar="Hmax"),
            set_prior("normal(0,20)", nlpar="Hmax", coef="popCC"),
            set_prior("normal(0,20)", nlpar="Hmax", coef="popDPR"),
            set_prior("gamma(2,2)", nlpar = "k"), # gamma constrains to be > 0
            set_prior("normal(0, 1)", nlpar = "k", coef="popCC"),
            set_prior("normal(0, 1)", nlpar = "k", coef= "popDPR"),
            set_prior("gamma(20, 3)", nlpar="delta"),
            set_prior("normal(0, 5)", nlpar = "delta", coef="popCC"),
            set_prior("normal(0, 5)", nlpar = "delta", coef= "popDPR")

)
```

## model summary
```{r}
fit5 <- brm(formula=f5, data=datbcd, prior=prior5, cores = 4)
```


```{r}
summary(fit5)
```

## model plot
```{r}
plot(fit5, N=3, ask=FALSE)
```
## DPR Pairs

```{r}
pairs(fit5, variable="DPR", regex = TRUE)
```
## Intercept Pairs

```{r}
pairs(fit5, variable="Intercept", regex = TRUE)
```

## Predictions

```{r}
fit5.predictions <- cbind(pred.df, prediction=predict(fit5, newdata = pred.df)[,"Estimate"]) %>%
  full_join(datbcd, by=c("day", "pop"))
```

```{r}
fit5.predictions %>% ggplot(aes(x=day)) +
  geom_line(aes(group=plantID, y=height_cm, color=pop), alpha=.2) +
  geom_line(aes(y=prediction, color=pop)) +
  scale_color_brewer(type="qual", palette = "Set2", guide="none") +
  facet_wrap(~pop)
```

## Model comparison

```{r, echo=TRUE}
fit5 <- add_criterion(fit5, "loo", moment_match=TRUE)
loo_compare(fit1, fit2, fit3, fit4, fit5)
```